"Convert package-lock.json into starlark Bazel fetches"

_NPM_IMPORT_TMPL = """    # Generated from [package-lock.json snippet here]
    npm_import(
        integrity = "{integrity}",
        package = "{package}",
        version = "{version}",
        deps = {deps},
    )
"""

def _escape(package_name):
    "Make a package name into a valid label without slash or at-sign"
    return package_name.replace("/", "_").replace("@", "_")

def _repo_name(package_name, version):
    "Make an external repository name from a package name and a version"
    return "npm_%s-%s" % (_escape(package_name), version)

def _import_dependencies(repository_ctx, bzl_out, packages):
    for (name, dep) in packages["dependencies"].items():
        if "resolved" not in dep.keys():
            continue
        deps = []
        if "requires" in dep.keys():
            for (n, d) in dep["requires"].items():
                deps.append("@" + _repo_name(n, d))
        bzl_out.extend([_NPM_IMPORT_TMPL.format(
            package = name,
            version = dep["version"],
            url = dep["resolved"],
            integrity = dep["integrity"],
            deps = deps,
        )])

def _translate_package_lock(repository_ctx):
    bzl_content = ["""# Generated by package_lock.bzl from {package_lock}

load("@e2e_core//:npm_import.bzl", "npm_import")

def npm_repositories():
    "Define external repositories to fetch each tarball individually from npm on-demand."
"""]

    lock_content = json.decode(repository_ctx.read(repository_ctx.attr.package_lock))
    lock_version = lock_content["lockfileVersion"]
    if lock_version < 2:
        fail("translate_package_lock only works with npm 7 lockfiles (lockfileVersion >= 2), found %s" % lock_version)

    _import_dependencies(repository_ctx, bzl_content, lock_content)

    repository_ctx.file("repositories.bzl", "\n".join(bzl_content))
    repository_ctx.file("BUILD.bazel", "")

translate_package_lock = repository_rule(
    doc = """In WORKSPACE, create a new external repo containing a helper starlark module
        containing a loadable macro that fetches npm packages as needed""",
    implementation = _translate_package_lock,
    attrs = {
        "package_lock": attr.label(mandatory = True),
    },
)
